name: ESP32 Build and Flash

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [esp32, esp32c3]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build ${{ matrix.target }} project
      uses: espressif/esp-idf-ci-action@v1
      with:
        esp_idf_version: v5.5
        target: ${{ matrix.target }}
        path: 'hello'
    
    - name: Upload ${{ matrix.target }} build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}-firmware
        path: |
          hello/build/bootloader/bootloader.bin
          hello/build/partition_table/partition-table.bin
          hello/build/hello.bin
          hello/build/flash_args

  flash:
    needs: build
    runs-on: self-hosted
    strategy:
      matrix:
        target: [esp32, esp32c3]
    
    steps:
    - name: Download ${{ matrix.target }} build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.target }}-firmware
        path: ./firmware
    
    - name: Flash firmware to ${{ matrix.target }}
      run: |
        cd firmware
        esptool --chip ${{ matrix.target }} -b 460800 --before default_reset --after hard_reset write_flash "@flash_args" > ../${{ matrix.target }}_flash_log.txt 2>&1

    # - name: Monitor ESP32 serial output
    #   run: |
    #    cd firmware
    #    sleep 3
    #    timeout 10s unbuffer python3 -m esp_idf_monitor > monitor_log.txt 2>&1 || true
    
    - name: Upload ${{ matrix.target }} logs
      uses: actions/upload-artifact@v4
      if: always()  # Upload logs even if previous steps failed
      with:
        name: ${{ matrix.target }}-logs
        path: |
          ${{ matrix.target }}_flash_log.txt
    #       ${{ matrix.target }}_monitor_log.txt

